from fastapi import FastAPI, Header, Depends, HTTPException, status
from fastapi.security import HTTPBearer
import sqlite3
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import torch
import torchvision.transforms as transforms
from PIL import Image
import base64
import io
import numpy as np
import cv2
import os

from pydantic import BaseModel
from passlib.context import CryptContext
import secrets

security = HTTPBearer()

# Kh·ªüi t·∫°o model 
class KanjiCNN(torch.nn.Module):
    def __init__(self, num_classes):
        super(KanjiCNN, self).__init__()
        self.conv1 = torch.nn.Conv2d(1, 32, kernel_size=3, padding=1)
        self.conv2 = torch.nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.fc1 = torch.nn.Linear(64 * 16 * 16, 512)
        self.fc2 = torch.nn.Linear(512, num_classes)
        self.relu = torch.nn.ReLU()
        self.pool = torch.nn.MaxPool2d(2, 2)

    def forward(self, x):
        x = self.pool(self.relu(self.conv1(x)))
        x = self.pool(self.relu(self.conv2(x)))
        x = x.view(x.size(0), -1)
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Load model 
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
num_classes = 3832  
model = KanjiCNN(num_classes)

# Load tr·ªçng s·ªë v√†o model
state_dict = torch.load("kanji_recognition.pth", map_location=device)
model.load_state_dict(state_dict)  
model.to(device)
model.eval()  

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Ho·∫∑c ch·ªâ ƒë·ªãnh IP c·ªßa ·ª©ng d·ª•ng Flutter
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
def get_db_connection():
    conn = sqlite3.connect("dictionary.db")
    conn.row_factory = sqlite3.Row
    return conn


# Load label mapping v√† ch·ªâ l·∫•y k√Ω t·ª± kanji
with open("kanji_labels.txt", "r", encoding="utf-8") as f:
    kanji_labels = [line.split(maxsplit=1)[-1] for line in f.read().splitlines()]

# Th∆∞ m·ª•c l∆∞u ·∫£nh ƒë·∫ßu v√†o ƒë·ªÉ debug
UPLOAD_FOLDER = "uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def preprocess_image(image_bytes):
    # M·ªü ·∫£nh v√† chuy·ªÉn th√†nh grayscale
    image = Image.open(io.BytesIO(image_bytes)).convert("L")

    #  L∆∞u ·∫£nh g·ªëc ƒë·ªÉ ki·ªÉm tra
    image.save(os.path.join(UPLOAD_FOLDER, "original_received.png"))

    # Chuy·ªÉn sang numpy ƒë·ªÉ x·ª≠ l√Ω v·ªõi OpenCV
    img_np = np.array(image)

    # Binarization (Nh·ªã ph√¢n h√≥a ·∫£nh)
    _, img_bin = cv2.threshold(img_np, 128, 255, cv2.THRESH_BINARY)

    # Ki·ªÉm tra n·ªÅn tr·∫Øng hay ƒëen, n·∫øu n·ªÅn tr·∫Øng th√¨ ƒë·∫£o ng∆∞·ª£c
    white_pixel_count = np.sum(img_bin == 255)
    black_pixel_count = np.sum(img_bin == 0)
    if white_pixel_count > black_pixel_count:
        img_bin = cv2.bitwise_not(img_bin)

    #  Resize v·ªÅ 64x64
    img_resized = cv2.resize(img_bin, (64, 64), interpolation=cv2.INTER_AREA)

    #  L∆∞u ·∫£nh sau khi ti·ªÅn x·ª≠ l√Ω ƒë·ªÉ ki·ªÉm tra
    Image.fromarray(img_resized).save(os.path.join(UPLOAD_FOLDER, "processed_image.png"))

    # Chuy·ªÉn sang tensor
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))  # Chu·∫©n h√≥a d·ªØ li·ªáu
    ])
    return transform(Image.fromarray(img_resized)).unsqueeze(0)

async def get_current_user(token: str = Depends(HTTPBearer())):
    conn = get_db_connection()
    try:
        user = conn.execute(
            "SELECT * FROM users WHERE token = ?",
            (token.credentials,)
        ).fetchone()
        
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid authentication credentials"
            )
        return dict(user)  # Chuy·ªÉn ƒë·ªïi sang dictionary
    finally:
        conn.close()

@app.post("/recognize-kanji")
async def recognize_kanji(image: dict):
    try:
        # Gi·∫£i m√£ ·∫£nh t·ª´ base64
        image_bytes = base64.b64decode(image["image"])
        input_tensor = preprocess_image(image_bytes)

        # D·ª± ƒëo√°n v·ªõi model
        with torch.no_grad():
            output = model(input_tensor)
            probabilities = torch.nn.functional.softmax(output[0], dim=0)
            top10 = torch.topk(probabilities, 10)

        # L·∫•y top 10 Kanji d·ª± ƒëo√°n
        top_kanji = [kanji_labels[idx] for idx in top10.indices.tolist()]
        top_probs = top10.values.tolist()

        # üñ® Ghi log d·ª± ƒëo√°n
        print("Top 10 Kanji d·ª± ƒëo√°n:", top_kanji)
        print("X√°c su·∫•t:", top_probs)

        return JSONResponse(content={"predictions": top_kanji, "probabilities": top_probs})

    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)


@app.get("/words")
def get_words(search: str = ""):
    conn = get_db_connection()
    if search:
        words = conn.execute("""
            SELECT * FROM words_Test 
            WHERE written = ? 
            UNION ALL
            SELECT * FROM words_Test 
            WHERE written LIKE ? AND written != ?
        """, (search, '%' + search + '%', search)).fetchall()
    else:
        words = conn.execute("SELECT * FROM words_Test").fetchall()
    
    conn.close()
    return [dict(word) for word in words]
# WHERE written = ? L·∫•y nh·ªØng t·ª´ c√≥ kh·ªõp ch√≠nh x√°c v·ªõi t·ª´ t√¨m ki·∫øm.
# UNION ALL
# Gh√©p th√™m k·∫øt qu·∫£ c√≥ ch·ª©a t·ª´ t√¨m ki·∫øm nh∆∞ng kh√¥ng ph·∫£i kh·ªõp ch√≠nh x√°c

@app.get("/kanji")
def get_kanji():
    conn = get_db_connection()
    kanji = conn.execute("SELECT * FROM kanji").fetchall()
    conn.close()
    return [dict(k) for k in kanji]

@app.post("/save_kanji")
def save_kanji(data: dict, current_user: dict = Depends(get_current_user)):
    conn = get_db_connection()
    try:
        conn.execute(
            "INSERT INTO saved_kanji (user_id, kanji, pronounced, meaning) VALUES (?, ?, ?, ?)",
            (current_user["id"], data["kanji"], data["pronounced"], data["meaning"]),
        )
        conn.commit()
        return {"message": "Kanji saved successfully"}
    except sqlite3.IntegrityError:
        return JSONResponse(
            content={"error": "Kanji already exists"},
            status_code=400
        )
    finally:
        conn.close()

@app.delete("/delete_kanji/{kanji}")
def delete_kanji(kanji: str, current_user: dict = Depends(get_current_user)):
    conn = get_db_connection()
    conn.execute(
        "DELETE FROM saved_kanji WHERE kanji = ? AND user_id = ?",
        (kanji, current_user["id"])
    )
    conn.commit()
    conn.close()
    return {"message": "Kanji removed"}
    

@app.get("/saved_kanji")
def get_saved_kanji(current_user: dict = Depends(get_current_user)):
    conn = get_db_connection()
    kanji = conn.execute(
        "SELECT * FROM saved_kanji WHERE user_id = ?",
        (current_user["id"],)
    ).fetchall()
    conn.close()
    return [dict(k) for k in kanji]



#######################################################################

# Th√™m class cho d·ªØ li·ªáu ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω
class UserCreate(BaseModel):
    username: str
    password: str
    email: str

class UserLogin(BaseModel):
    username: str
    password: str

class CommentCreate(BaseModel):
    content: str
    kanji: str

class CommentVote(BaseModel):
    action: str  # 'like' or 'dislike'

# Kh·ªüi t·∫°o password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# T·∫°o b·∫£ng users trong SQLite (th√™m v√†o ƒë·∫ßu file)
def init_db():
    conn = sqlite3.connect("dictionary.db")

    conn.execute("""
        CREATE TABLE IF NOT EXISTS votes (
            user_id INTEGER NOT NULL,
            comment_id INTEGER NOT NULL,
            action TEXT CHECK(action IN ('like', 'dislike')),
            PRIMARY KEY(user_id, comment_id),
            FOREIGN KEY(user_id) REFERENCES users(id),
            FOREIGN KEY(comment_id) REFERENCES comments(id)
        )
    """)
    conn.commit()
    conn.close()

# G·ªçi h√†m init_db khi kh·ªüi ƒë·ªông
init_db()


# Th√™m c√°c endpoints m·ªõi
@app.post("/register")
async def register(user: UserCreate):
    conn = get_db_connection()
    hashed_password = pwd_context.hash(user.password)
    token = secrets.token_hex(16)
    
    try:
        conn.execute(
            "INSERT INTO users (username, email, password, token) VALUES (?, ?, ?, ?)",
            (user.username, user.email, hashed_password, token)
        )
        conn.commit()
        return {"message": "User created", "token": token}
    except sqlite3.IntegrityError:
        return JSONResponse(
            content={"error": "Username or email already exists"},
            status_code=400
        )
    finally:
        conn.close()

@app.post("/login")
async def login(user: UserLogin):
    conn = get_db_connection()
    db_user = conn.execute(
        "SELECT * FROM users WHERE username = ?", 
        (user.username,)
    ).fetchone()
    
    if not db_user or not pwd_context.verify(user.password, db_user["password"]):
        return JSONResponse(
            content={"error": "Invalid credentials"},
            status_code=401
        )
    
    new_token = secrets.token_hex(16)
    conn.execute(
        "UPDATE users SET token = ? WHERE id = ?",
        (new_token, db_user["id"])
    )
    conn.commit()
    conn.close()
    
    return {"message": "Login successful", "token": new_token}

@app.post("/logout")
async def logout(authorization:  str = Header(None)):
    if not authorization: 
        return JSONResponse(
            content={"error": "Token missing"},
            status_code=401
        )
        # Extract token t·ª´ header (Bearer <token>)
    try:
        token = authorization.split(" ")[1]
    except IndexError:
        return JSONResponse(
            content={"error": "Invalid token format"},
            status_code=401
        )
    conn = get_db_connection()
    conn.execute(
        "UPDATE users SET token = NULL WHERE token = ?",
        (token,)
    )
    conn.commit()
    conn.close()
    return {"message": "Logged out successfully"}

# @app.get("/me")
# async def get_current_user(token: str = Header(None)):
#     if not token:
#         return JSONResponse(
#             content={"error": "Not authenticated"},
#             status_code=401
#         )
    
#     conn = get_db_connection()
#     user = conn.execute(
#         "SELECT username, email FROM users WHERE token = ?",
#         (token,)
#     ).fetchone()
#     conn.close()
    
#     if not user:
#         return JSONResponse(
#             content={"error": "Invalid token"},
#             status_code=401
#         )
    
#     return {"username": user["username"], "email": user["email"]}


@app.post("/comments")
async def create_comment(
    comment: CommentCreate,
    current_user: dict = Depends(get_current_user)  # ƒê·∫£m b·∫£o lu√¥n tr·∫£ v·ªÅ dictionary
):
    conn = get_db_connection()
    try:
        conn.execute(
            "INSERT INTO comments (user_id, kanji, content) VALUES (?, ?, ?)",
            (current_user["id"], comment.kanji, comment.content)
        )
        conn.commit()
        return {"message": "Comment added"}
    except sqlite3.IntegrityError as e:
        return JSONResponse(
            content={"error": str(e)},
            status_code=400
        )
    finally:
        conn.close()

@app.get("/comments/{kanji}")
async def get_comments(
    kanji: str,
    page: int = 1,
    limit: int = 5,
    current_user: dict = Depends(get_current_user)
):
    conn = get_db_connection()
    offset = (page - 1) * limit
    
    comments = conn.execute("""
        SELECT 
            c.*, 
            u.username,
            v.action as user_vote
        FROM comments c
        LEFT JOIN users u ON c.user_id = u.id
        LEFT JOIN votes v ON v.comment_id = c.id AND v.user_id = ?
        WHERE c.kanji = ?
        ORDER BY (c.likes - c.dislikes) DESC
        LIMIT ? OFFSET ?
    """, (current_user["id"], kanji, limit, offset)).fetchall()
    
    total = conn.execute(
        "SELECT COUNT(*) FROM comments WHERE kanji = ?",
        (kanji,)
    ).fetchone()[0]
    
    conn.close()
    return {
        "comments": [dict(c) for c in comments],
        "total": total,
        "page": page,
        "total_pages": (total + limit - 1) // limit
    }

@app.post("/comments/{comment_id}/vote")
async def vote_comment(
    comment_id: int,
    vote: CommentVote,
    current_user: dict = Depends(get_current_user)
):
    conn = get_db_connection()
    try:
        # Ki·ªÉm tra vote hi·ªán t·∫°i
        current_vote = conn.execute(
            "SELECT action FROM votes WHERE user_id = ? AND comment_id = ?",
            (current_user["id"], comment_id)
        ).fetchone()

        # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p
        if current_vote:
            if current_vote["action"] == vote.action:
                # H·ªßy vote n·∫øu tr√πng h√†nh ƒë·ªông
                conn.execute(
                    "DELETE FROM votes WHERE user_id = ? AND comment_id = ?",
                    (current_user["id"], comment_id)
                )
                # Gi·∫£m count
                conn.execute(f"""
                    UPDATE comments SET {vote.action}s = {vote.action}s - 1 
                    WHERE id = ?
                """, (comment_id,))
            else:
                # ƒê·ªïi t·ª´ like sang dislike ho·∫∑c ng∆∞·ª£c l·∫°i
                conn.execute(
                    "UPDATE votes SET action = ? WHERE user_id = ? AND comment_id = ?",
                    (vote.action, current_user["id"], comment_id)
                )
                # Gi·∫£m action c≈©, tƒÉng action m·ªõi
                conn.execute(f"""
                    UPDATE comments 
                    SET {current_vote["action"]}s = {current_vote["action"]}s - 1,
                        {vote.action}s = {vote.action}s + 1 
                    WHERE id = ?
                """, (comment_id,))
        else:
            # Th√™m vote m·ªõi
            conn.execute(
                "INSERT INTO votes (user_id, comment_id, action) VALUES (?, ?, ?)",
                (current_user["id"], comment_id, vote.action)
            )
            # TƒÉng count
            conn.execute(f"""
                UPDATE comments SET {vote.action}s = {vote.action}s + 1 
                WHERE id = ?
            """, (comment_id,))

        conn.commit()
        return {"message": "Vote updated"}
    finally:
        conn.close()
